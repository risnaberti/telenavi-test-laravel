<?php

namespace {{controllerNamespace}};

use {{modelNamespace}}\{{modelName}};
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use {{requestNamespace}}\{{modelName}}Request;
use Illuminate\Support\Facades\Redirect;
use Illuminate\View\View;
use Illuminate\Routing\Controllers\Middleware;
use Woo\GridView\DataProviders\EloquentDataProvider;

class {{modelName}}Controller extends Controller implements \Illuminate\Routing\Controllers\HasMiddleware
{
    public static function middleware(): array
    {
        return [
            new Middleware('permission:{{modelView}} view', only: ['index', 'show']),
            new Middleware('permission:{{modelView}} create', only: ['create', 'store']),
            new Middleware('permission:{{modelView}} edit', only: ['edit', 'update']),
            new Middleware('permission:{{modelView}} delete', only: ['destroy']),
        ];
    }

    /**
     * Display a listing of the resource.
     */
    public function index(Request $request): View
    {
        $dataProvider = new EloquentDataProvider({{modelName}}::query());
        $perPage = 15;

        return view('{{modelView}}.index', compact('dataProvider', 'perPage'))
            ->with('i', ($request->query('page', 1) - 1) * $perPage);
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create(): View
    {
        ${{modelNameLowerCase}} = new {{modelName}}();

        return view('{{modelView}}.create', compact('{{modelNameLowerCase}}'));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store({{modelName}}Request $request): RedirectResponse
    {
        try {
            {{modelName}}::create($request->validated());
        } catch (\Illuminate\Database\QueryException $e) {
            return Redirect::route('tahun-ajaran.index')
                ->with('error', 'Terjadi kesalahan saat membuat data.');
        }

        return redirect()->route('{{modelRoute}}.index')
            ->with('success', '{{modelName}} berhasil dibuat.');
    }

    /**
     * Display the specified resource.
     */
    public function show($id): View
    {
        ${{modelNameLowerCase}} = {{modelName}}::find($id);

        return view('{{modelView}}.show', compact('{{modelNameLowerCase}}'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit($id): View
    {
        ${{modelNameLowerCase}} = {{modelName}}::find($id);

        return view('{{modelView}}.edit', compact('{{modelNameLowerCase}}'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update({{modelName}}Request $request, {{modelName}} ${{modelNameLowerCase}}): RedirectResponse
    {
        try {
            ${{modelNameLowerCase}}->update($request->validated());
        } catch (\Illuminate\Database\QueryException $e) {
            if ($e->getCode() == '23000') {
                return redirect()->route('{{modelView}}.index')
                    ->with('error', '{{modelName}} ini sudah digunakan dan tidak dapat diperbarui.');
            }
            return redirect()->route('{{modelView}}.index')
                ->with('error', 'Terjadi kesalahan saat memperbarui data.');
        }

        return redirect()->route('{{modelRoute}}.index')
            ->with('success', '{{modelName}} berhasil diperbarui.');
    }

    public function destroy($id): RedirectResponse
    {
        try {
            {{modelName}}::find($id)->delete();
        } catch (\Illuminate\Database\QueryException $e) {
            if ($e->getCode() == '23000') {
                return redirect()->route('{{modelView}}.index')
                    ->with('error', '{{modelName}} ini sudah digunakan dan tidak dapat dihapus.');
            }
            return redirect()->route('{{modelView}}.index')
                ->with('error', 'Terjadi kesalahan saat menghapus data.');
        }

        return redirect()->route('{{modelRoute}}.index')
            ->with('success', '{{modelName}} berhasil dihapus.');
    }
}
